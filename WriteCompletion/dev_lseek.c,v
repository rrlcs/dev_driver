head	1.7;
access;
symbols;
locks
	ravi_raja:1.7; strict;
comment	@ * @;


1.7
date	2016.07.12.08.28.47;	author ravi_raja;	state Exp;
branches;
next	1.6;

1.6
date	2016.07.11.18.50.56;	author ravi_raja;	state Exp;
branches;
next	1.5;

1.5
date	2016.07.11.12.05.48;	author ravi_raja;	state Exp;
branches;
next	1.4;

1.4
date	2016.07.10.07.56.00;	author ravi_raja;	state Exp;
branches;
next	1.3;

1.3
date	2016.07.10.07.11.34;	author ravi_raja;	state Exp;
branches;
next	1.2;

1.2
date	2016.07.10.07.10.20;	author ravi_raja;	state Exp;
branches;
next	1.1;

1.1
date	2016.06.25.03.48.36;	author ravi_raja;	state Exp;
branches;
next	;


desc
@lseek
@


1.7
log
@spinlock synchronization technique implemented
@
text
@#include"header.h"
#include"declaration.h"

loff_t dev_lseek(struct file * filep, loff_t loff, int seek)
{
	struct Dev *ldev;
	printk(KERN_INFO "BEGIN: %s", __func__);
	ldev = filep->private_data;
	spin_lock(&ldev->my_lock);
	filep->f_pos = loff;	
	printk("\n%s loff_t %d \n", __FILE__, (int)loff);
	printk("\n%s seek %d\n", __FILE__, seek);
	printk(KERN_INFO "END: %s", __func__);
	return 0;
}
@


1.6
log
@*** empty log message ***
@
text
@d9 1
@


1.5
log
@*** empty log message ***
@
text
@d8 1
a8 1
//	ldev = filep->private_data;
@


1.4
log
@f_pos set to offset loff
@
text
@d8 1
a8 1
	ldev = filep->private_data;
@


1.3
log
@*** empty log message ***
@
text
@d9 1
a9 1
	
@


1.2
log
@printing seek loff to check the parameters
@
text
@d10 2
a11 2
	printf("\n%s loff_t %d \n", __FILE__, (int)loff);
	printf("\n%s seek %d\n", __FILE__, seek);
@


1.1
log
@Initial revision
@
text
@d6 1
d8 4
@
