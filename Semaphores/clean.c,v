head	1.19;
access;
symbols;
locks
	ravi_raja:1.19; strict;
comment	@ * @;


1.19
date	2016.07.12.09.12.44;	author ravi_raja;	state Exp;
branches;
next	1.18;

1.18
date	2016.07.12.08.43.11;	author ravi_raja;	state Exp;
branches;
next	1.17;

1.17
date	2016.07.12.07.51.45;	author ravi_raja;	state Exp;
branches;
next	1.16;

1.16
date	2016.07.12.06.16.16;	author ravi_raja;	state Exp;
branches;
next	1.15;

1.15
date	2016.07.04.13.20.15;	author ravi_raja;	state Exp;
branches;
next	1.14;

1.14
date	2016.07.04.11.28.21;	author ravi_raja;	state Exp;
branches;
next	1.13;

1.13
date	2016.06.25.04.08.30;	author ravi_raja;	state Exp;
branches;
next	1.12;

1.12
date	2016.06.25.04.01.44;	author ravi_raja;	state Exp;
branches;
next	1.11;

1.11
date	2016.06.24.10.28.14;	author ravi_raja;	state Exp;
branches;
next	1.10;

1.10
date	2016.06.24.07.07.27;	author ravi_raja;	state Exp;
branches;
next	1.9;

1.9
date	2016.06.24.06.54.29;	author ravi_raja;	state Exp;
branches;
next	1.8;

1.8
date	2016.06.20.07.46.32;	author ravi_raja;	state Exp;
branches;
next	1.7;

1.7
date	2016.06.18.11.13.49;	author ravi_raja;	state Exp;
branches;
next	1.6;

1.6
date	2016.06.18.08.26.15;	author ravi_raja;	state Exp;
branches;
next	1.5;

1.5
date	2016.06.17.10.58.33;	author ravi_raja;	state Exp;
branches;
next	1.4;

1.4
date	2016.06.17.10.56.48;	author ravi_raja;	state Exp;
branches;
next	1.3;

1.3
date	2016.06.17.10.23.07;	author ravi_raja;	state Exp;
branches;
next	1.2;

1.2
date	2016.06.17.09.43.38;	author ravi_raja;	state Exp;
branches;
next	1.1;

1.1
date	2016.06.17.07.15.29;	author ravi_raja;	state Exp;
branches;
next	;


desc
@This is a cleanup function that removes the device from device table entry
removes inserted kernel object file using rmmod
@


1.19
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declaration.h"
//#include"fops.h"

static void __exit func_name(void)
{
	int l;

	for(l=0; l<nod; l++)
	{
		//complete_and_exit(&quant[l].my_completion, 0);
		cdev_del(&quant[l].c_dev);
	}
	kfree(quant);
	unregister_chrdev_region(dev, nod);
	printk(KERN_INFO "Bye kernel , We will back\n");
};
module_exit(func_name);
@


1.18
log
@*** empty log message ***
@
text
@d11 1
a11 1
		complete_and_exit(&quant[l].my_completion, 0);
@


1.17
log
@*** empty log message ***
@
text
@d11 1
a11 1
		//complete_and_exit(&quant[l].my_completion, 0);
@


1.16
log
@complete_and_exit function used for stating the completion of using of shared resources in the critical region
@
text
@d11 1
a11 1
		complete_and_exit(&quant[l].my_completion, 0);
@


1.15
log
@*** empty log message ***
@
text
@d11 1
@


1.14
log
@*** empty log message ***
@
text
@d16 1
a16 1
}
@


1.13
log
@*** empty log message ***
@
text
@d16 1
a16 1
};
@


1.12
log
@removing devices| minorno| looping
@
text
@d14 1
a14 10
/*	if(!(kfree(quant)))
	{
		printk(KERN_INFO "ERROR: Deallocation of memory Failed.\n");
	}
	else
	{
		printk(KERN_INFO "Memory successfully Deallocated");
	}
*/	
	unregister_chrdev_region(newdev, nod);
@


1.11
log
@*** empty log message ***
@
text
@d7 6
a12 2
	printk(KERN_INFO "Bye kernel , We will back\n");
	cdev_del(&quant->c_dev);
d23 2
a24 1
	unregister_chrdev_region(dev, nod);
@


1.10
log
@*** empty log message ***
@
text
@a6 1
	int l;
d8 1
a8 4
	for(l=0; l<nod; l++)
	{
		cdev_del(&quant[l].c_dev);
	}
@


1.9
log
@using for loop for removing all the drivers equal to nod
@
text
@d22 2
a23 2
*/
	unregister_chrdev_region(dev, NOD);
@


1.8
log
@*** empty log message ***
@
text
@d7 1
d9 4
a12 2

	cdev_del(&quant->c_dev);
@


1.7
log
@Device Table Entry Rempoved using cdev_del
@
text
@d9 1
a9 1
	cdev_del(c_dev);
@


1.6
log
@Allocated memory to struct Dev is freed using kfree
@
text
@d3 2
d8 2
a9 2
	unregister_chrdev_region(dev, NOD);
	
d11 2
a12 1
/*	{
d14 7
a20 1
	}*/
@


1.5
log
@first arg changed to majorno
@
text
@d6 7
a12 2
	unregister_chrdev_region(majorno, nod);
}
@


1.4
log
@majorno replaced by nod
@
text
@d6 1
a6 1
	unregister_chrdev_region(dev, nod);
@


1.3
log
@Redeclaration error removed.
@
text
@a2 2
//dev_t dev;
//int majorno;
d5 2
a6 2
	printk(KERN_INFO "bye kernel , we will back\n");
	unregister_chrdev_region(dev, majorno);
@


1.2
log
@unregister_chrdev_region called to unregister the driver
@
text
@d3 2
a4 2
dev_t dev;
int majorno;
@


1.1
log
@Initial revision
@
text
@d2 3
d8 1
@
